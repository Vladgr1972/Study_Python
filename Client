import socket
import time

class ClientError(Exception):
    pass

class ClientSocketError(ClientError):
    pass

class Client:
    def __init__(self, host, port, timeout=None):
        self.host = host
        self.port = port
        self.timeout = timeout

        try:
            self.sock = socket.create_connection((self.host, self.port), self.timeout)
        except socket.error as error:
            raise ClientSocketError("Connection get error", error)

    def _answer_server(self): # recive answer from server
        try:
            data = self.sock.recv(1024)
        except socket.error as error:
            raise ClientSocketError("error recive answ", error)
        print(data.decode())


    def get(self):
        pass

    def put(self, name, metric_value, timestump=None):  # send date to server and recive ansver from there
        self.name = name
        self.metric_value = float(metric_value)
        timestump = self._shek_time_(timestump)
        string_byte = ("put " + str(self.name) + " " + str(self.metric_value) + " " + str(timestump) + " \n").encode()
        try:
            self.sock.sendall(string_byte)
        except socket.error as error:
            raise ClientSocketError("Data put with error ", error)
        self._answer_server()


    def _shek_time_(self,timestump):        #check timestump == None or != None
        if timestump == None:
            return int(time.time())
        else:
            return int(timestump)

    def _translate_(self,string):
        pass

    def close(self):
        try:
            self.sock.close()
        except socket.error as error:
            raise ClientSocketError("Connection closed with error",error)
        pass


client1 = Client("127.0.0.1",8888)
client1.put("eadrum.cpu",4)
client1.put("eadrum.cpu",4,465456456)
client1.put("HDD.speed",8)

client1.close()


